
Devins Final Report Contribution

1) Devin made the following contributions: he helped to get the servo motor working in the initial stages of
the project and then took the lead implementing the circuitry and line following algorithm. His contributions to
the servo included familiarizing the group with the library and basic functions used to control the motor's
movement.

Most of his efforts were aimed towards the line follower, however. He wired the array of reflective optical
sensors, making use of the documentation provided in the project outline. He worked to integrate these sensors
with the arduino, and to create the algorithm that would control the robot's motors whie reading data from
these sensors.

2) Block diagrams

3) The coding procedure for the line follower proceeded as it always does; by deciding on what function the program
should perform, and then writing the code. While deciding on the functionality, I made a small diagram of the
sensors and their position in relation to the line. I used this to derive what the logic should be. Of course, as
testing proceeded (which is discussed later in this report) the logic was modified to improve performance.

The solution we settled on was for the car to have the following states while in line following mode: straight, slight
turn, harder turn, and hard turn. For each of the turning states, there was a right and left version, making
a total of seven states for the car. As we had four sensors, straight mode would be active when both the sensors
near the center of the car detected a line. The slight turn would be activated when only one of the two center
sensors detected a line. When either of the two outer sensors detected a line, the harder turn would be activated.

The crucial mode, the sharpest turning setting, required more thought. Including this mode allowed us to implement a
significantly higher speed than otherwise would have been possible. Our car needed to remember the last direction
it was turning in. In doing so, when none of the sensors detected a line, our program could tell the car to make
a very hard turn in the direction it was last turning in. Losing the line was thus not a consideration, as the
car has the capability to find it again. The track used during the testing did not have sharp enough turns for
this to be demonstrated, but it was something our group made sure our car was capable of.

By using four reflective optical sensors and choosing to use seven states for the line following mode, our group
was able to create a coding solution that allowed our car to move quickly and with smooth motion along the track.

4) The wiring procedure started with reading the documentation for the reflective optical sensors. Finding out how
the sensors worked, maximum ratings, and other details needed to be known first. Once the sensors were understood,
the first sensor was wired and tested to ensure useful data could be collected. Then three other sensors were added
in what seemed like optimal positions on the breadboard at the time, although their exact orientation would be
modified during the testing stage to ensure better responsivess as the car crossed the line.

Ultimately, the wiring solution we settled on was to have two sensors very close to the center of the car, with
two additional sensors placed towards the outside. The extra data allowed our group to implement a coding solution
that had mulitiple turning speeds, which increased the speed of the car overall, as well as the smoothness of the
motion. 

5) There were a number of alternatives to the arrangment of four sensors that was ultimately chosen. One was simply
using two sensors placed very close together in the center of the car. This method had potential as the closeness
promised to provide data as soon as the car lost the direction of the line. However, using only these two sensors
required that the car overcompensate every time it lost the line, which was very often as the sensors would not
be spaced far apart. Ultimately, we did incorporate this approach into our implementation, but did not rely on
only two sensors, instead opting for four.

Another option was to use two sensors spaced further apart. This idea never gained much traction as it would
obviously result in motion that was not smooth and did not track the line closely, reducing the speed the line
could be followed at and increasing the chance of overshooting the line.

The third alternative option, and the design choice which was our second preference, was to use one sensor in the 
middle of the car, with two others on the outside. The benefit of having one dedicated sensor in the middle was that
the car would get useful data about when it was oriented in the correct direction, allowing us to increase the speed
on straightaway stretches, which was something our group was adament about implementing. The problem with using
only one in the middle however, is that as soon the center sensor lost the line, we did not immediately have 
information about which direction the care should turn in. We could have moved the outer sensors closer to the center to
compensate for this, but this choice came with similiar drawbacks to those discussed in the first alternate option.

6) The testing procedure was to implement a version of the line following circuitry and program that we thought
was optimal, then test our car on a track. Noting the kinds of failures the car had or improvements we could
make, our group would tweak the logic or reorganize the positions of the sensors to get better data. We proceeded
in this fashion until our car worked perfectly every time.

7) There were three main problems encountered while developing the line following mode: the problem of making 
the car move faster along the track, the problem of what to do when the line was lost, and the problem of one
of our sensors giving inaccurate data.

The first problem was solved by reorienting the reflective optical sensors on the breadboard. By making the
two center sensors very close together, we were able to implement a very gradual turning mode in addition to
a straight mode. The reason this worked is that it allowed our car to spend more time with both wheels moving
close to top speed. Our car therefore moved faster around the track overall.

We solved the problem of losing the line by implementing a state that would turn the car in whichever direction
it was last turning, should the car ever lose the line. Any time the car loses the line, one of the outer sensors
necessarily is the last sensor to detect the line. When either of the outer sensors is the only sensor to detect
a line, the wheel speeds will be set accordingly. We were therefore able to use information about the last power
levels delivered to the wheels, as this was stored in the robot's state object, thereby giving us information about
which direction the car was last turning in. This method proved to work perfectly, as our car worked flawlessly
when in line following mode, and was always able to find the line in the event of losing it.

One of our sensors gave higher values than the other sensors when not on the line, which was causing problems
for the logic of our line following algorithm. We decided that instead of buying a new sensor, we would simply
change the threshold under which this sensor would report not seeing the line. This was a cheaper and very
simple fix that worked well.

8) Creating the line follower was instructive on how to design an algorithm that makes incremental changes
to a system using real-time data. I found this to be worthwhile, as the process of thinking through the
logic needed to implement such a design is a portable skill which can be applied to other projects that use
and act on real time data. Processor speeds are so great that even a relatively slow computer like the arduino
can make near instantaneous adjustements to wheel speed and thus direction of our car. 



